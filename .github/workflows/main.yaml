name: Build & Commit Books

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'

permissions:
  contents: write

concurrency:
  group: build-books-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'   # no cache => no lockfile required

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler: none

      # System libraries Chrome needs (works on 22.04 and 24.04)
      - name: Install OS packages required by Chrome
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update

          install_either() {
            for pkg in "$@"; do
              if apt-cache show "$pkg" >/dev/null 2>&1; then
                echo "Installing $pkg"
                sudo apt-get install -y --no-install-recommends "$pkg"
                return 0
              fi
            done
            echo "None of these packages exist: $*" >&2
            exit 1
          }

          sudo apt-get install -y --no-install-recommends \
            ca-certificates xdg-utils wget unzip \
            fonts-noto fonts-noto-cjk fonts-noto-color-emoji \
            libatk-bridge2.0-0 libatk1.0-0 libcairo2 libcups2 \
            libdbus-1-3 libdrm2 libgbm1 libgtk-3-0 libnspr4 libnss3 \
            libpango-1.0-0 libx11-6 libx11-xcb1 libxcomposite1 libxcursor1 \
            libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 \
            libxss1 libxtst6

          install_either libasound2t64 libasound2
          install_either libglib2.0-0t64 libglib2.0-0
          install_either libexpat1t64 libexpat1
          install_either libstdc++6 libstdc++6
          install_either libc6 libc6
          install_either libfontconfig1 libfontconfig1
          install_either fonts-liberation fonts-liberation

      # Install latest stable Google Chrome and expose CHROME_PATH env var
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v2
        with:
          chrome-version: stable

      # Make CHROME_PATH available to later steps as PUPPETEER_EXECUTABLE_PATH
      - name: Export Chrome path for Puppeteer
        run: |
          echo "PUPPETEER_EXECUTABLE_PATH=$CHROME_PATH" >> $GITHUB_ENV
          echo "Using Chrome at: $CHROME_PATH"

      - name: Ensure scripts are executable
        run: |
          chmod +x ./scripts/install.sh || true
          chmod +x ./scripts/build.en.sh || true
          chmod +x ./scripts/build.vi.sh || true

      - name: Put npm global bin on PATH
        run: |
          mkdir -p ~/.npm-global
          npm config set prefix ~/.npm-global
          echo "$HOME/.npm-global/bin" >> $GITHUB_PATH

      - name: Install toolchain (Asciidoctor + Mermaid)
        run: |
          gem install --no-document asciidoctor asciidoctor-pdf asciidoctor-epub3 asciidoctor-diagram rouge
          npm i -g @mermaid-js/mermaid-cli

      # Optional: quick sanity debug
      - name: Debug Chrome env
        run: |
          echo "CHROME_PATH=$CHROME_PATH"
          echo "PUPPETEER_EXECUTABLE_PATH=$PUPPETEER_EXECUTABLE_PATH"
          command -v google-chrome || true
          ls -l "$CHROME_PATH" || true

      - name: Build (English)
        run: ./scripts/build.en.sh production

      - name: Build (Vietnamese)
        run: ./scripts/build.vi.sh production

      - name: Prepare GitHub Pages index
        run: |
          test -f docs/en/book.html || { echo "docs/en/book.html not found"; exit 1; }
          cp -f docs/en/book.html docs/index.html
          cp -rf docs/en/images docs/images || true

      - name: Configure Git
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Commit changes (if any)
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          git add docs/
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          SHORT_SHA=$(git rev-parse --short HEAD)
          TS=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          git commit -m "chore(docs): rebuild book outputs [skip ci] (${TS}, ${SHORT_SHA})"
          git push origin "HEAD:${BRANCH}"
